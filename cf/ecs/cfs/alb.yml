---
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  VPCStackName:
    Description: The name of the VPC stack name.
    Type: String

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: esm-lounge-test

  FargateContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the Fargate containers
      VpcId:
        Fn::ImportValue: !Join ["-", [!Ref "AWS::Region", !Ref "VPCStackName", "VPC"]]

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref "FargateContainerSecurityGroup"
      IpProtocol: -1
      SourceSecurityGroupId: !Ref "PublicLoadBalancerSG"

  EcsSecurityGroupIngressFromSelf:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from other containers in the same security group
      GroupId: !Ref "FargateContainerSecurityGroup"
      IpProtocol: -1
      SourceSecurityGroupId: !Ref "FargateContainerSecurityGroup"

  PublicLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public facing load balancer
      VpcId:
        Fn::ImportValue: !Join ["-", [!Ref "AWS::Region", !Ref "VPCStackName", "VPC"]]
      SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: "30"
      Subnets:
        - Fn::ImportValue: !Join ["-", [!Ref "AWS::Region", !Ref "VPCStackName", "PublicSubnet0"]]
        - Fn::ImportValue: !Join ["-", [!Ref "AWS::Region", !Ref "VPCStackName", "PublicSubnet1"]]
      SecurityGroups: [!Ref "PublicLoadBalancerSG"]
      Type: "application"
      Name: esm-louge-test-alb

  DummyTargetGroupPublic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /hi
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Join ["-", [!Ref "AWS::StackName", "drop-1"]]
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Join ["-", [!Ref "AWS::Region", !Ref "VPCStackName", "VPC"]]

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - "DummyTargetGroupPublic"
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref "DummyTargetGroupPublic"
          Type: "forward"
      LoadBalancerArn: !Ref "PublicLoadBalancer"
      Port: 80
      Protocol: HTTP

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ["sts:AssumeRole"]
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "ec2:AttachNetworkInterface"
              - "ec2:CreateNetworkInterface"
              - "ec2:CreateNetworkInterfacePermission"
              - "ec2:DeleteNetworkInterface"
              - "ec2:DeleteNetworkInterfacePermission"
              - "ec2:Describe*"
              - "ec2:DetachNetworkInterface"
              - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
              - "elasticloadbalancing:DeregisterTargets"
              - "elasticloadbalancing:Describe*"
              - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
              - "elasticloadbalancing:RegisterTargets"
            Resource: "*"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - "ecr:GetAuthorizationToken"
                - "ecr:BatchCheckLayerAvailability"
                - "ecr:GetDownloadUrlForLayer"
                - "ecr:BatchGetImage"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
              Resource: "*"

Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref "ECSCluster"
    Export:
      Name: !Join ["-", [!Ref "AWS::Region", !Ref "AWS::StackName", "ClusterName"]]
  ExternalUrl:
    Description: The url of the external load balancer
    Value: !Join ["", ["http://", !GetAtt "PublicLoadBalancer.DNSName"]]
    Export:
      Name: !Join ["-", [!Ref "AWS::Region", !Ref "AWS::StackName", "ExternalUrl"]]
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt "ECSRole.Arn"
    Export:
      Name: !Join ["-", [!Ref "AWS::Region", !Ref "AWS::StackName", "ECSRole"]]
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt "ECSTaskExecutionRole.Arn"
    Export:
      Name: !Join ["-", [!Ref "AWS::Region", !Ref "AWS::StackName", "ECSTaskExecutionRole"]]
  PublicListener:
    Description: The ARN of the public load balancer"s Listener
    Value: !Ref PublicLoadBalancerListener
    Export:
      Name: !Join ["-", [!Ref "AWS::Region", !Ref "AWS::StackName", "PublicListener"]]
  FargateContainerSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref "FargateContainerSecurityGroup"
    Export:
      Name: !Join ["-", [!Ref "AWS::Region", !Ref "AWS::StackName", "FargateContainerSecurityGroup"]]
